// alert('1. js 실행')

// 2. 함수 호출(스크립트 내에서)
	// 1. js : 함수명()
	// 2. html : <마크업 이벤트속성="함수명()" />
	
	// function : 함수 정의할때 사용되는 키워드
	// 클릭이벤트 : 함수명[아무거나]
	// ( ) : 인수 : 해당함수를 호출할때 함수로 들어오는 값/데이터
	// return : 반환값 : 해당함수가 종료될때 호출했던 곳으로 보내는 값/데이터	
	
	// parseInt( Math.random( )*9 )			 : 0 ~ 9 [ 0.8999 ]
	// parseInt( Math.random( )*9 )+1 		 : 1~10 사이 [ 0.9999 ]


// 4. 배열선언 [ 버튼의 상태를 저장하는 배열 -> null : 빈자리 ]
let 버튼목록현황 = [null , null , null , null , null , null , null , null , null  ]

// 1. 함수 정의/만들기
function 클릭이벤트(버튼번호 ){ // f s

	// 1. 선택된 번호와 알모양을 알두기 함수 전달하고 반환이 false면 알두기 실패 / true 성공 후 컴퓨터 알두기 성공		
		// ! : 반대/부정 false -> true		/ true -> false
	if( ! 알두기( 버튼번호, 'O' ) ) { return; }
	결과();
	// 컴퓨터 차례 무한루프 [ 정상적으로 둘 때까지 ]
	while( true ){ // w s
		let 컴퓨터번호 = parseInt( Math.random( )*9 )+1 
		if ( 알두기( 컴퓨터번호, 'X' ) ) { 결과(); return;}
	} // w e
	
} // f e

// 2. 알두기
function 알두기( 버튼번호 , 알모양 ){
	// 1. <div> 버튼 목록 가져와서 배열에 저장 [ div 9개 호출 ]
	let 버튼목록 = document.querySelectorAll('.버튼');
	// 2. 배열에 상태 변경 //1. 만약에 빈자리가 아니면 실패 false 반환
	if ( 버튼목록현황[버튼번호-1] != null ){ return false; }
	// 3. 알모양과 상태 변경 /	 인덱스:0 번호:1 // 클릭된 번호의 div 찾기 [ 선택번호-1 ] // -1 : 인덱스는 0부터 시작해서
	버튼목록[버튼번호-1].innerHTML =알모양 ; 버튼목록현황[버튼번호-1] = 알모양;
	// 4. 성공 true 반환
	return true; // 성공했으면 true 반환
}

// 3. 결과 함수 [ 사람/컴퓨터 알두기 성공했을때 1.승리 2. 패배 3.무승부[빈자리가 없으면]]
function 결과(){ alert('결과를 찾습니다.'); 
	// 1. 이겼을때
	// 2. 졌을때
	// 3. 무승부일때

}














